import subprocess
import numpy as np

params = [[10, 2, 1]
    #[5, 2, 1], [5, 2, 2], [5, 2, 3], [5, 2, 4], [5, 2, 5], [5, 2, 6],
    #[5, 5, 1], [5, 5, 2], [5, 5, 3], [5, 5, 4], [5, 5, 5], [5, 5, 6],
    #[5, 10, 1], [5, 10, 2], [5, 10, 3], [5, 10, 4], [5, 10, 5], [5, 10, 6],
    #[10, 2, 1], [10, 2, 2], [10, 2, 3], [10, 2, 4], [10, 2, 5], [10, 2, 6],
    #[10, 5, 1], [10, 5, 2], [10, 5, 3], [10, 5, 4], [10, 5, 5], [10, 5, 6],
    #[10, 10, 1], [10, 10, 2], [10, 10, 3], [10, 10, 4], [10, 10, 5], [10, 10, 6],
]

def average(arr):
    return np.average(arr, 0)

for param_set in params:
    print(param_set)
    numbers = []
    t = 0
    for seed in range(100, 105):
        output = subprocess.check_output(f"python3 TOP/runTOP.py --G {param_set[0]} --minSup {param_set[1]} --seqGap {param_set[2]} --seed {seed}", shell=True)
        last5 = output.decode("utf-8").replace("seconds", "").split("\n")[-8:-3]
        #print(last5)
        last5numbers = [round(float(x.split(":")[-1]), 3) for x in last5]
        numbers.append(last5numbers[1:])
        t = last5numbers[0] 
    avg = average(np.array(numbers))
    print(param_set[0], "&", param_set[1], "&", param_set[2], "&", t, "&", avg[0], "&", avg[1], "&", avg[2], "&", avg[3], "\\\\")
    print("\\hline")

'''
5 & 2 & 1 & 0.45 & 0.8800000000000001 & 0.7173999999999999 & 0.8762000000000001 & 0.715 \\
\hline
5 & 2 & 2 & 0.87 & 0.9104000000000001 & 0.7482 & 0.907 & 0.7451999999999999 \\
\hline
5 & 2 & 3 & 2.61 & 0.922 & 0.744 & 0.9186 & 0.7414000000000001 \\
\hline
5 & 2 & 4 & 11.06 & 0.925 & 0.7534000000000001 & 0.9218 & 0.7514 \\
\hline
5 & 2 & 5 & 68.01 & 0.9270000000000002 & 0.7552000000000001 & 0.9246000000000001 & 0.7554 \\
\hline
5 & 2 & 6 & 461.59 & 0.9276000000000002 & 0.7582 & 0.9248000000000001 & 0.7578 \\
\hline
5 & 5 & 1 & 0.43 & 0.8548 & 0.7009999999999998 & 0.8482 & 0.6948 \\
\hline
5 & 5 & 2 & 0.81 & 0.8657999999999999 & 0.7152000000000001 & 0.8619999999999999 & 0.7118 \\
\hline
5 & 5 & 3 & 2.46 & 0.8565999999999999 & 0.708 & 0.8542 & 0.708 \\
\hline
5 & 5 & 4 & 10.52 & 0.858 & 0.7093999999999999 & 0.8556000000000001 & 0.7095999999999999 \\
\hline
5 & 5 & 5 & 69.26 & 0.8592000000000001 & 0.711 & 0.8573999999999998 & 0.7123999999999999 \\
\hline
5 & 5 & 6 & 479.89 & 0.8587999999999999 & 0.7106 & 0.8572000000000001 & 0.712 \\
\hline
5 & 10 & 1 & 0.46 & 0.7647999999999999 & 0.6208 & 0.7638 & 0.6225999999999999 \\
\hline
5 & 10 & 2 & 0.89 & 0.7502000000000001 & 0.6079999999999999 & 0.7507999999999999 & 0.6113999999999999 \\
\hline
5 & 10 & 3 & 2.47 & 0.7455999999999999 & 0.6044 & 0.7464 & 0.6073999999999999 \\
\hline
5 & 10 & 4 & 12.49 & 0.7465999999999999 & 0.6056 & 0.7476 & 0.6088 \\
\hline
5 & 10 & 5 & 69.31 & 0.7398 & 0.6001999999999998 & 0.7416 & 0.6039999999999999 \\
\hline
5 & 10 & 6 & 475.44 & 0.7404 & 0.6006 & 0.742 & 0.6042 \\
\hline
10 & 2 & 1 & 1.19 & 0.59 & 0.48739999999999994 & 0.587 & 0.4878 \\
\hline
10 & 2 & 2 & 3.03 & 0.6876 & 0.5542 & 0.6836 & 0.5544 \\
\hline
10 & 2 & 3 & 11.84 & 0.7501999999999999 & 0.5974 & 0.7459999999999999 & 0.5948 \\
\hline
10 & 2 & 4 & 77.89 & 0.7816 & 0.6242 & 0.7762 & 0.622 \\
\hline
10 & 2 & 5 & 456.38 & 0.8034000000000001 & 0.6446000000000001 & 0.7988000000000001 & 0.6426000000000001 \\
\hline
'''